library(ggplot2)
library(dplyr)
data_path <- "/Users/leonhard/supergreenlab/results-main.csv"
data_path <- "results-main.csv"
energy_data <- read.csv(data_path) %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
library(ggplot2)
library(dplyr)
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
View(energy_data)
View(energy_data)
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
summary(filter(zoom_data, background == "off" & camera == "on")$joules)
summary(filter(zoom_data, background == "on" & camera == "on")$joules)
summary(filter(zoom_data, background == "off" & camera == "on" & microphone == "off")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off")$joules)
summary(filter(zoom_data, background == "off" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(meet_data, background == "off" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(meet_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "on", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "on", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "on", number_of_participants == "5")$joules)
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "off", number_of_participants == "5")$joules)
summary(filter(zoom_data, background == "on" & camera == "on" & microphone == "on", number_of_participants == "5")$joules)
# Summaries
summary(meet_data$joules)
summary(zoom_data$joules)
summary(energy_data$joules)
# Violin plot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black") +
stat_summary(fun=median, geom="point", shape="circle", size=2, color="blue", alpha=.5)
# Scatterplot for the different apps, color-/shape-coded with camera and mic
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, color = camera, shape = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_jitter()
# Violin plot: Number of participants (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = as.factor(number_of_participants))) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Num. of\nparticip.") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
# Violin plot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black") +
stat_summary(fun=median, geom="point", shape="circle", size=2, color="blue", alpha=.5)
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
# Meet histogram
ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Meet summaries
summary(filter(meet_data, number_of_participants == 2)$joules)
summary(filter(meet_data, number_of_participants == 5)$joules)
summary(filter(meet_data, camera == "off")$joules)
summary(filter(meet_data, camera == "on")$joules)
summary(filter(meet_data, microphone == "off")$joules)
summary(filter(meet_data, microphone == "on")$joules)
summary(filter(meet_data, background == "off" & camera == "on")$joules)
summary(filter(meet_data, background == "on" & camera == "on")$joules)
summary(meet_data$joules)
# Meet summaries
summary(filter(meet_data, number_of_participants == 2)$joules)
summary(filter(meet_data, number_of_participants == 5)$joules)
summary(filter(meet_data, camera == "off")$joules)
summary(filter(meet_data, camera == "on")$joules)
summary(filter(meet_data, microphone == "off")$joules)
summary(filter(meet_data, microphone == "on")$joules)
summary(filter(meet_data, background == "off")$joules)
summary(filter(meet_data, background == "on")$joules)
summary(meet_data$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
summary(filter(zoom_data, background == "off")$joules)
rbind(energy_data, filter(energy_data, camera == "off"))
raw_energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
energy_data <- rbind(raw_energy_data, filter(raw_energy_data, camera == "off"))
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
# Summaries
summary(meet_data$joules)
summary(zoom_data$joules)
summary(energy_data$joules)
# Meet summaries
summary(filter(meet_data, number_of_participants == 2)$joules)
summary(filter(meet_data, number_of_participants == 5)$joules)
summary(filter(meet_data, camera == "off")$joules)
summary(filter(meet_data, camera == "on")$joules)
summary(filter(meet_data, background == "off")$joules)
summary(filter(meet_data, background == "on")$joules)
summary(filter(meet_data, microphone == "off")$joules)
summary(filter(meet_data, microphone == "on")$joules)
summary(meet_data$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "off")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
# Scatterplot for the different apps, color-/shape-coded with camera and mic
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, color = camera, shape = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_jitter()
# General histogram of energy consumption
ggplot() +
geom_histogram(data = energy_data, aes(x = joules), binwidth = 40) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Meet histogram
ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Microphone (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Microphone") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Number of participants (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = as.factor(number_of_participants))) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Num. of\nparticip.") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
meet_camoff <- filter(meet_data, camera == "off")
ggplot(data = meet_camoff, aes(x = as.factor(number_of_participants), y = joules)) +
ylim(0, NA) +
xlab("Number of participants") +
ylab("Energy consumption [J]") +
labs(fill = "App") +
geom_boxplot()
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
# Scatterplot for the different apps, color-/shape-coded with camera and mic
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, color = camera, shape = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_jitter()
filter(energy_data, background == "on") %>%
View
filter(energy_data, background == "off") %>%
View
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Microphone (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Microphone") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Number of participants (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = as.factor(number_of_participants))) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Num. of\nparticip.") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
raw_energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
duplicate <- filter(raw_energy_data, camera == "off") %>%
mutate(background = "on")
energy_data <- rbind(raw_energy_data, duplicate)
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
energy_data_camera_on <- filter(energy_data, camera == "on")
# Violin plot: Background (for the different apps)
ggplot(data = energy_data_camera_on, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = filter(energy_data_camera_on, app = "Meet"), aes(x = as.factor(number_of_participants), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = filter(energy_data_camera_on, app == "Meet"), aes(x = as.factor(number_of_participants), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = filter(energy_data_camera_on, app == "Meet"), aes(x = as.factor(number_of_participants), y = joules, fill = background)) +
#ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = energy_data_camera_on, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
energy_data <- rbind(raw_energy_data, duplicate)
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
#energy_data <- rbind(raw_energy_data, duplicate)
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
# Summaries
summary(meet_data$joules)
summary(zoom_data$joules)
summary(energy_data$joules)
# Meet summaries
summary(filter(meet_data, number_of_participants == 2)$joules)
summary(filter(meet_data, number_of_participants == 5)$joules)
summary(filter(meet_data, camera == "off")$joules)
summary(filter(meet_data, camera == "on")$joules)
summary(filter(meet_data, background == "off")$joules)
summary(filter(meet_data, background == "on")$joules)
summary(filter(meet_data, microphone == "off")$joules)
summary(filter(meet_data, microphone == "on")$joules)
summary(meet_data$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "off")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
summary(filter(meet_data, background == "off" & camera == "on")$joules)
summary(filter(meet_data, background == "on" & camera == "on")$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "off")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
summary(filter(zoom_data, background == "off" & camera == "on")$joules)
summary(filter(zoom_data, background == "on" & camera == "on")$joules)
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = energy_data_camera_on, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Microphone (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Microphone") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Number of participants (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = as.factor(number_of_participants))) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Num. of\nparticip.") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
