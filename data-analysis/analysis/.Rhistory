energy_data <- rbind(raw_energy_data, duplicate)
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
#energy_data <- rbind(raw_energy_data, duplicate)
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
# Summaries
summary(meet_data$joules)
summary(zoom_data$joules)
summary(energy_data$joules)
# Meet summaries
summary(filter(meet_data, number_of_participants == 2)$joules)
summary(filter(meet_data, number_of_participants == 5)$joules)
summary(filter(meet_data, camera == "off")$joules)
summary(filter(meet_data, camera == "on")$joules)
summary(filter(meet_data, background == "off")$joules)
summary(filter(meet_data, background == "on")$joules)
summary(filter(meet_data, microphone == "off")$joules)
summary(filter(meet_data, microphone == "on")$joules)
summary(meet_data$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "off")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
# Boxplot for the different apps
ggplot(data = energy_data, aes(x = as.factor(app), y = joules)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.1, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black")
summary(filter(meet_data, background == "off" & camera == "on")$joules)
summary(filter(meet_data, background == "on" & camera == "on")$joules)
# Zoom summaries
summary(filter(zoom_data, number_of_participants == 2)$joules)
summary(filter(zoom_data, number_of_participants == 5)$joules)
summary(filter(zoom_data, camera == "off")$joules)
summary(filter(zoom_data, camera == "on")$joules)
summary(filter(zoom_data, background == "off")$joules)
summary(filter(zoom_data, background == "on")$joules)
summary(filter(zoom_data, microphone == "off")$joules)
summary(filter(zoom_data, microphone == "on")$joules)
summary(zoom_data$joules)
summary(filter(zoom_data, background == "off" & camera == "on")$joules)
summary(filter(zoom_data, background == "on" & camera == "on")$joules)
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Background (for the different apps)
ggplot(data = energy_data_camera_on, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Microphone (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = microphone)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Microphone") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plot: Number of participants (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = as.factor(number_of_participants))) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Num. of\nparticip.") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
library(ggplot2)
library(dplyr)
data_path <- "results-pre.csv"
energy_data <- read.csv(data_path) %>%
mutate(joules_per_minute = joules / duration_in_minutes)
# Energy consumption depending on duration (should be linear)
ggplot(data = energy_data,
aes(x = duration_in_minutes, y = joules, color = app)) +
xlim(0, NA) +
ylim(0, NA) +
geom_smooth(method = lm , color = "gray", se = FALSE) +
geom_jitter() +
labs(x = "Duration [min]",
y = "Energy consumption [J]",
color = "App")
# Mean power consumption depending on duration (should be constant)
ggplot(data = energy_data,
aes(x = duration_in_minutes, y = joules_per_minute, color = app)) +
xlim(0, NA) +
ylim(0, NA) +
geom_smooth(method = lm , color = "gray", se = FALSE) +
geom_jitter() +
labs(x = "Duration [min]",
y = "Mean power consumption [J/min]",
color = "App")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
lm(meet_data$joules ~ meet_data$duration_in_minutes)
lm(zoom_data$joules ~ zoom_data$duration_in_minutes)
joules_per_minute <- energy_data$joules/energy_data$duration_in_minutes
mean(joules_per_minute)
sd(joules_per_minute)
# General histogram of energy consumption
ggplot() +
geom_histogram(data = energy_data, aes(x = joules), binwidth = 40) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Meet histogram
ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
# Meet histogram
ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
title("Zoom")
library(gridExtra)
# Meet histogram
meet_histo <- ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
title("Zoom")
grid.arrange(meet_histo, zoom_histo, nrow=1, ncol=2)
# Meet histogram
meet_histo <- ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
title("Zoom")
grid.arrange(meet_histo, zoom_histo, nrow=1, ncol=2)
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count")
grid.arrange(meet_histo, zoom_histo, nrow=1, ncol=2)
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
main("Zoom")
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
ggtitle("Zoom")
grid.arrange(meet_histo, zoom_histo, nrow=1, ncol=2)
# Meet histogram
meet_histo <- ggplot() +
geom_histogram(data = meet_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
ggtitle("Meet")
# Zoom histogram
zoom_histo <- ggplot() +
geom_histogram(data = zoom_data, aes(x = joules), binwidth = 20) +
xlim(0, NA) +
xlab("Energy consumption [J]") +
ylab("Count") +
ggtitle("Zoom")
grid.arrange(meet_histo, zoom_histo, nrow=1, ncol=2)
print_relative_increase(1, 2)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print(paste0((actual/base)-1)*100, "%")
}
print_relative_increase(1, 2)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print((actual/base)-1)*100)
}
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print((actual/base)-1)*100))
}
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print((actual/base)-1)*100)))
}
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print((actual/base)-1)*100)
}
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print(((actual/base)-1)*100)
}
print_relative_increase(1, 2)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
print(((actual/base)-1)*100)
}
print_relative_increase(1, 0)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
printf("%.1f %%", 100 * ((actual/base)-1))
}
print_relative_increase(1, 0)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
sprintf("%.1f %%", 100 * ((actual/base)-1))
}
print_relative_increase(1, 0)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
sprintf("%.1f%%", 100 * ((actual/base)-1))
}
print_relative_increase(1, 0)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
sprintf("%.1f%%", 100 * ((actual/base)-1))
}
print_relative_increase(1, 1.4)
# Relative changes when changing one factor
print_relative_increase <- function(base, actual) {
sprintf("%.1f%%", 100 * ((actual/base)-1))
}
print_relative_increase(1.2, 1.4)
# Meet: Relative changes
print_relative_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
# Relative changes when changing one factor
print_relative_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((mean(actual)/mean(base))-1))
}
# Meet: Relative changes
print_relative_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
# Relative changes when changing one factor
print_relative_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((mean(actual_set)/mean(base_set))-1))
}
# Meet: Relative changes
print_relative_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
# Relative changes when changing one factor
print_relative_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((mean(actual_set$joules)/mean(base_set$joules))-1))
}
# Meet: Relative changes
print_relative_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
# Relative changes when changing one factor
print_median_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((median(actual_set$joules)/median(base_set$joules))-1))
}
# Meet: Relative changes
print_median_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
# Relative changes when changing one factor
print_median_increase <- function(base_set, actual_set) {
sprintf("%.0f%%", 100 * ((median(actual_set$joules)/median(base_set$joules))-1))
}
# Meet: Relative changes
print_median_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
print_median_increase(filter(meet_data, camera == "off"), filter(meet_data, camera == "on"))
print_median_increase(filter(meet_data, background = "off" & camera == "on"), filter(meet_data, background == "on" & camera == "on"))
print_median_increase(filter(meet_data, background == "off" & camera == "on"), filter(meet_data, background == "on" & camera == "on"))
print_median_increase(filter(meet_data, microphone == "off"), filter(meet_data, microphone == "on"))
print_all_median_increases(meet_data)
print_all_median_increases <- function(dataset) {
print_median_increase(filter(dataset, number_of_participants == "2"), filter(dataset, number_of_participants == "5"))
print_median_increase(filter(dataset, camera == "off"), filter(dataset, camera == "on"))
print_median_increase(filter(dataset, background == "off" & camera == "on"), filter(dataset, background == "on" & camera == "on"))
print_median_increase(filter(dataset, microphone == "off"), filter(dataset, microphone == "on"))
}
print_all_median_increases(meet_data)
print_all_median_increases(zoom_data)
print_all_median_increases <- function(dataset) {
print_median_increase(filter(dataset, number_of_participants == "2"), filter(dataset, number_of_participants == "5"))
print_median_increase(filter(dataset, camera == "off"), filter(dataset, camera == "on"))
print_median_increase(filter(dataset, background == "off" & camera == "on"), filter(dataset, background == "on" & camera == "on"))
#print_median_increase(filter(dataset, microphone == "off"), filter(dataset, microphone == "on"))
}
print_all_median_increases(meet_data)
# Meet: Relative changes
print_median_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
print_median_increase(filter(meet_data, camera == "off"), filter(meet_data, camera == "on"))
print_median_increase(filter(meet_data, background == "off" & camera == "on"), filter(meet_data, background == "on" & camera == "on"))
print_median_increase(filter(meet_data, microphone == "off"), filter(meet_data, microphone == "on"))
# Zoom: Relative changes
print_median_increase(filter(zoom_data, number_of_participants == "2"), filter(zoom_data, number_of_participants == "5"))
print_median_increase(filter(zoom_data, camera == "off"), filter(zoom_data, camera == "on"))
print_median_increase(filter(zoom_data, background == "off" & camera == "on"), filter(zoom_data, background == "on" & camera == "on"))
print_median_increase(filter(zoom_data, microphone == "off"), filter(zoom_data, microphone == "on"))
# Relative changes when changing one factor
print_median_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((median(actual_set$joules)/median(base_set$joules))-1))
}
print_median_increase(filter(zoom_data, microphone == "off"), filter(zoom_data, microphone == "on"))
# Relative changes when changing one factor
print_mean_increase <- function(base_set, actual_set) {
sprintf("%.1f%%", 100 * ((mean(actual_set$joules)/mean(base_set$joules))-1))
}
# Meet: Relative changes
print_mean_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
print_mean_increase(filter(meet_data, camera == "off"), filter(meet_data, camera == "on"))
print_mean_increase(filter(meet_data, background == "off" & camera == "on"), filter(meet_data, background == "on" & camera == "on"))
print_mean_increase(filter(meet_data, microphone == "off"), filter(meet_data, microphone == "on"))
# Relative changes when changing one factor
print_mean_increase <- function(base_set, actual_set) {
sprintf("%.f%%", 100 * ((mean(actual_set$joules)/mean(base_set$joules))-1))
}
# Meet: Relative changes
print_mean_increase(filter(meet_data, number_of_participants == "2"), filter(meet_data, number_of_participants == "5"))
print_mean_increase(filter(meet_data, camera == "off"), filter(meet_data, camera == "on"))
print_mean_increase(filter(meet_data, background == "off" & camera == "on"), filter(meet_data, background == "on" & camera == "on"))
print_mean_increase(filter(meet_data, microphone == "off"), filter(meet_data, microphone == "on"))
# Zoom: Relative changes
print_mean_increase(filter(zoom_data, number_of_participants == "2"), filter(zoom_data, number_of_participants == "5"))
print_mean_increase(filter(zoom_data, camera == "off"), filter(zoom_data, camera == "on"))
print_mean_increase(filter(zoom_data, background == "off" & camera == "on"), filter(zoom_data, background == "on" & camera == "on"))
print_mean_increase(filter(zoom_data, microphone == "off"), filter(zoom_data, microphone == "on"))
# Violin plots: Camera (for the different apps), zoomed in
ggplot(data = filter(energy_data, camera == "off"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
ggplot(data = filter(energy_data, camera == "on" & joules > 300), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
grid.arrange(viobox_camera_off, viobox_camera_on nrow=2, ncol=1)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on" & joules > 300), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on (without outliers)")
# Violin plots: Camera (for the different apps), zoomed in
viobox_camera_off <- ggplot(data = filter(energy_data, camera == "off"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera off")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=2, ncol=1)
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on" & joules > 300), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
filter(energy_data, camera == "on" & joules < 500)
min(filter(energy_data, camera == "on" & joules > 500)$joules)
min(filter(energy_data, camera == "on")$joules)
min(filter(energy_data, camera == "on" & joules > 155)$joules)
min(filter(energy_data, camera == "on" & joules > 156)$joules)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
xlim(900, NA)
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
ylim(900, NA)
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
ylim(900, NA) +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
ylim(min(filter(energy_data, camera == "on", joules > 300)$joules), NA) + # Filter out outliers
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
# Violin plot: Background (for the different apps), zoomed in
ggplot(data = energy_data_camera_on, aes(x = as.factor(app), y = joules, fill = background)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
ylim(min(filter(energy_data, camera == "on", joules > 300)$joules), NA) + # Filter out outliers
labs(fill = "Virtual\nbackground") +
geom_violin() +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
library(ggplot2)
library(dplyr)
library(gridExtra)
# Loading data
energy_data <- read.csv("results-main.csv") %>%
mutate(camera = ifelse(camera, "on", "off")) %>%
mutate(microphone = ifelse(microphone, "on", "off")) %>%
mutate(background = ifelse(background, "on", "off"))
energy_data_camera_on <- filter(energy_data, camera == "on")
meet_data <- energy_data %>% filter(app == "Meet")
zoom_data <- energy_data %>% filter(app == "Zoom")
# Summaries
summary(meet_data$joules)
# Violin plot: Camera (for the different apps)
ggplot(data = energy_data, aes(x = as.factor(app), y = joules, fill = camera)) +
ylim(0, NA) +
xlab("App") +
ylab("Energy consumption [J]") +
labs(fill = "Camera") +
geom_violin(trim=FALSE) +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9))
# Violin plots: Camera (for the different apps), zoomed in
viobox_camera_off <- ggplot(data = filter(energy_data, camera == "off"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
geom_violin(trim=FALSE) +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera off")
viobox_camera_on <- ggplot(data = filter(energy_data, camera == "on"), aes(x = as.factor(app), y = joules)) +
xlab("App") +
ylab("Energy consumption [J]") +
ylim(min(filter(energy_data, camera == "on", joules > 300)$joules), NA) + # Filter out outliers
geom_violin(trim=FALSE) +
geom_boxplot(width=.15, alpha=.5, position=position_dodge(.9)) +
stat_summary(fun=mean, geom="point", shape="diamond", size=3, color="black", position=position_dodge(.9)) +
ggtitle("Camera on")
grid.arrange(viobox_camera_off, viobox_camera_on, nrow=1, ncol=2)
ggplot(data = energy_data, aes(y = joules)) +
ylim(0, NA) +
geom_bar()
barplot(energy_data$joules)
